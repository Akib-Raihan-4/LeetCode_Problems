{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Closures"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 1. Create Hello World Function\r\n\r\n<div class=\"elfjS\" data-track-load=\"description_content\">Write a function&nbsp;<code>createHelloWorld</code>.&nbsp;It should return a new function that always returns&nbsp;<code>\"Hello World\"</code>.\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre><strong>Input:</strong> args = []\r\n<strong>Output:</strong> \"Hello World\"\r\n<strong>Explanation:</strong>\r\nconst f = createHelloWorld();\r\nf(); // \"Hello World\"\r\n\r\nThe function returned by createHelloWorld should always return \"Hello World\".\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre><strong>Input:</strong> args = [{},null,42]\r\n<strong>Output:</strong> \"Hello World\"\r\n<strong>Explanation:</strong>\r\nconst f = createHelloWorld();\r\nf({}, null, 42); // \"Hello World\"\r\n\r\nAny arguments could be passed to the function but it should still always return \"Hello World\".\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= args.length &lt;= 10</code></li>\r\n</ul>\r\n</div>"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var createHelloWorld = function(){\r\n    return function(...args){\r\n        return \"Hello World\";\r\n    }\r\n};"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "let f = createHelloWorld();\r\nf();"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'Hello World'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 2. Counter"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var createCounter = function(n){\r\n    return function(){\r\n        return n++;\r\n    }\r\n};"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "var counter = createCounter(10);\r\ncounter()\r\ncounter()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m11\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 3. To be or Not to be\r\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var expect = function(val){\r\n    return {\r\n        toBe: (val2) =>{\r\n            if(val === val2){\r\n                return true;\r\n            }\r\n            else throw new Error(\"Not Equal\")\r\n        },\r\n        notToBe: (val2) =>{\r\n            if(val !== val2){\r\n                return true;\r\n            }\r\n            else throw new Error(\"Equal\");\r\n        }\r\n    }\r\n};"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "expect(5).toBe(5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 4. Counter II"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var createCounter2 = function(init){\r\n    let temp = init;\r\n    return{\r\n        increment:()=>{\r\n            return ++temp;\r\n        },\r\n        reset:()=>{\r\n            temp = init;\r\n            return temp;\r\n        },\r\n        decrement:()=>{\r\n            return --temp;\r\n        }\r\n    }\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "var counter2 = createCounter2(10)\r\ncounter2.increment()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m11\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Basic Array Transfomations"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 5. Apply Transform Over Each Element in Array"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function plusone(n){\r\n    return n + 1;\r\n}\r\n\r\nvar map = function(arr, fn){\r\n    for(var i = 0; i < arr.length; i+=1){\r\n        arr[i] = fn(arr[i],i)\r\n    }\r\n    return arr\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "var arr = [1,2,3]\r\n\r\nconsole.log(map(arr,plusone))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 2, 3, 4 ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 6. Filter Element from Array"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function greaterThan10(n){\r\n    return n>10;\r\n}\r\n\r\nvar filter = function(arr,fn){\r\n    var result = [];\r\n    arr.forEach((element, index) => {\r\n        if(fn(element, index)){\r\n            result.push(element);\r\n        }\r\n    });\r\n    return result\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "arr = [0,5,20,30]\r\n\r\nconsole.log(filter(arr,greaterThan10))\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 20, 30 ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 7. Array Reduce Transformation"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var reduce = function(nums, fn, init){\r\n    nums.forEach(element=>{\r\n        init = fn(init, element)\r\n        \r\n    });\r\n    return init\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "let nums = [1,2,3,4]\r\nfunction sum(accum, curr){\r\n    return accum + curr * curr;\r\n}\r\nlet init = 100\r\n\r\nconsole.log(reduce(nums, sum,init))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "130",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Function Transformation"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 8. Function Composition"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var compose = function(functions){\r\n    return function(x){\r\n        for(let i = functions.length-1; i >= 0; i-=1){\r\n            x = functions[i](x)\r\n        }\r\n        return x\r\n    }\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const fn = compose([x => x + 1, x => x * x, x => 2 * x])\r\nconsole.log(fn(4))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "65",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 9. Return Length of Arguments Passed"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var argumentsLength = function(...args){\r\n    console.log(args.length)\r\n};"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "argumentsLength(1,2,3)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "3",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 10. Allow One Function Call"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var once = function(fn){\r\n    let hasBeenCalled = false;\r\n\r\n    return function(...args){\r\n        if(!hasBeenCalled){\r\n            hasBeenCalled = true;\r\n            return fn(...args);\r\n        }\r\n        else{\r\n            return undefined\r\n        }\r\n    }\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "let fn = (a,b,c) => (a+b+c)\r\nlet onceFn = once(fn)\r\n\r\nonceFn(1,2,3)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m6\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "onceFn(1,2,3)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 11. Memoize"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function memoize(fn){\r\n    let dic = {};\r\n    return function(...args){\r\n        let key = JSON.stringify(args)\r\n        if(key in dic){\r\n            return dic[key]\r\n        }\r\n        dic[key] = fn(...args)\r\n        return dic[key]\r\n    }\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "let callCount = 0\r\n\r\nconst memoizedFn = memoize(function(a,b){\r\n    callCount += 1;\r\n    return a + b;\r\n})\r\n\r\nlet result = memoizedFn(2,3)\r\nresult\r\n// callCount"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m5\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Promise and Time"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 12. Add Two Promises"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#### Reduce function how it works ? \r\n\"reduce()\" function takes a callback function it itterates over every element in an array and then returns a single value. <br>\r\nNow for example there is a array [1,2,3]. To sum it all the number let's take a callback function.<br>\r\narray.reduce((accumulator, currentValue) => { return accumulator + currentValue}, 0).<br>\r\n\"accumlator\" is basically cumulative of the previous value, the initial value for accumulator is set to 0, how ? <br>\r\ncheck the last the digit \"0\" is set, so that means accumulator declared with default value \"0\". <br>\r\nNow it will itterate over the array and sum all the digits in the array.<br>"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#### Callback Function\r\n\r\nIn JavaScript, a callback function is simply a function that is passed as an argument to another function <br> and is executed after some operation is completed, or an event occurs. Callback functions allow you to control the flow of your code <br> and perform actions asynchronously."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var addTwoPromises = async function(promise1, promise2){\r\n    const [val1, val2] = await Promise.all([promise1, promise2])\r\n\r\n    return val1 + val2;\r\n}\r\n\r\n\r\n// Another way of doing this\r\n\r\nvar addTwoPromises = async (promise1, promise2) => {\r\n    return Promise.all([promise1, promise2])\r\n    .then((values) => {\r\n        const sum = values.reduce((total, value) => total + value, 0);\r\n        return sum;\r\n    })\r\n};"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "addTwoPromises(Promise.resolve(10), Promise.resolve(20)).then(console.log);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "30",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 13. Sleep"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "async function sleep(millis) {\r\n    await new Promise(resolve  => setTimeout(resolve, millis));\r\n}\r\n\r\n\r\n// Another solution\r\n\r\nasync function sleep2(millis){\r\n    return new Promise((res, rej)=>{\r\n        setTimeout(()=>{\r\n            res()\r\n        }, millis)\r\n    })\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "let t = Date.now()\r\nsleep2(100).then(()=>console.log(Date.now()-t))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "103",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 14. Timeout Cancellation"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var cancellable = function(fn, args, t){\r\n    var cancelFn = () => clearTimeout(timeoutFun);\r\n\r\n    var timeoutFun = setTimeout(()=>\r\n    fn(...args), t);\r\n\r\n    return cancelFn\r\n};"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const result = [];\r\nconst fn = (x) => x * 5;\r\nconst args = [2], t = 20, cancelTimeMs = 50;\r\n\r\nconst start = performance.now();\r\n\r\nconst log = (...argsArr) => {\r\n    const diff = Math.floor(performance.now() - start);\r\n    result.push({\"time\": diff, \"returned\": fn(...argsArr)});\r\n}\r\n\r\nconst cancel = cancellable(log, args, t);\r\n\r\nconst maxT = Math.max(t, cancelTimeMs);\r\n\r\nsetTimeout(cancel, cancelTimeMs);\r\n\r\nsetTimeout(() => {\r\n    console.log(result); // [{\"time\":20,\"returned\":10}]\r\n}, maxT + 15);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "Timeout {",
                                "  _idleTimeout: \u001b[33m65\u001b[39m,",
                                "  _idlePrev: \u001b[36m[TimersList]\u001b[39m,",
                                "  _idleNext: \u001b[36m[TimersList]\u001b[39m,",
                                "  _idleStart: \u001b[33m22720\u001b[39m,",
                                "  _onTimeout: \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "  _timerArgs: \u001b[90mundefined\u001b[39m,",
                                "  _repeat: \u001b[1mnull\u001b[22m,",
                                "  _destroyed: \u001b[33mfalse\u001b[39m,",
                                "  [\u001b[32mSymbol(refed)\u001b[39m]: \u001b[33mtrue\u001b[39m,",
                                "  [\u001b[32mSymbol(kHasPrimitive)\u001b[39m]: \u001b[33mfalse\u001b[39m,",
                                "  [\u001b[32mSymbol(asyncId)\u001b[39m]: \u001b[33m104\u001b[39m,",
                                "  [\u001b[32mSymbol(triggerId)\u001b[39m]: \u001b[33m12\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ { time: 31, returned: 10 } ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 15. Interval Cancellation"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var cancellable = function(fn, args, t) {\r\n    fn(...args);\r\n\r\n    var setIntervalFun = setInterval(()=> {\r\n        fn(...args)\r\n    }, t)\r\n\r\n    return () => clearInterval(setIntervalFun)\r\n    \r\n};"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "/\r\n   const result = [];\r\n \r\n   const fn = (x) => x * 2;\r\n   const args = [4], t = 35, cancelTimeMs = 190;\r\n \r\n   const start = performance.now();\r\n \r\n   const log = (...argsArr) => {\r\n       const diff = Math.floor(performance.now() - start);\r\n       result.push({\"time\": diff, \"returned\": fn(...argsArr)});\r\n   }\r\n        \r\n   const cancel = cancellable(log, args, t);\r\n \r\n   setTimeout(cancel, cancelTimeMs);\r\n    \r\n   setTimeout(() => {\r\n       console.log(result); [\r\n                                 {\"time\":0,\"returned\":8},\r\n                                 {\"time\":35,\"returned\":8},\r\n                                 {\"time\":70,\"returned\":8},\r\n                                 {\"time\":105,\"returned\":8},\r\n                                 {\"time\":140,\"returned\":8},\r\n                                 {\"time\":175,\"returned\":8}\r\n                            ]\r\n}, cancelTimeMs + t + 15)    \r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.error",
                            "value": {
                                "name": "Error",
                                "message": "Failed to generate code object, \nconst fn = (x) => x * 2;\r\n ^\n\nUnterminated regular expression",
                                "stack": ""
                            }
                        }
                    ]
                }
            ]
        }
    ]
}